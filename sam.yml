Transform: AWS::Serverless-2016-10-31

Parameters:
  LambdaLogGroupPrefix:
    Type: String
    Default: /aws/lambda

Globals:
  Function:
    Architectures:
      - arm64
    Runtime: python3.11
    Timeout: 15
    ReservedConcurrentExecutions: 1
    Layers:
      - arn:aws:lambda:ap-northeast-1:017000801446:layer:AWSLambdaPowertoolsPythonV2-Arm64:43
    Environment:
      Variables:
        BUCKET_NAME_CONTENT: !Ref BucketContent
        DISTRIBUTION_ID: !Ref Distribution

Resources:
  BucketContent:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        RestrictPublicBuckets: true
      CorsConfiguration:
        CorsRules:
          - AllowedMethods:
              - "GET"
              - "HEAD"
            AllowedHeaders:
              - "*"
            AllowedOrigins:
              - "*"

  ResponseHeaderPolicy:
    Type: AWS::CloudFront::ResponseHeadersPolicy
    Properties:
      ResponseHeadersPolicyConfig:
        Name: ResponseHeaderPolicy
        CustomHeadersConfig:
          Items:
            - Header: "Cache-Control"
              Value: "no-store, no-cache"
              Override: true

  OriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Ref BucketContent
        SigningProtocol: sigv4
        SigningBehavior: always
        OriginAccessControlOriginType: s3

  Distribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - Id: !GetAtt BucketContent.RegionalDomainName
            OriginAccessControlId: !GetAtt OriginAccessControl.Id
            DomainName: !GetAtt BucketContent.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: ""
        DefaultCacheBehavior:
          TargetOriginId: !GetAtt BucketContent.RegionalDomainName
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - HEAD
            - GET
          CachedMethods:
            - HEAD
            - GET
          Compress: true
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6
          ResponseHeadersPolicyId: !Ref ResponseHeaderPolicy
          OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf
        PriceClass: PriceClass_All
        Enabled: true
        HttpVersion: http2and3
        IPV6Enabled: true

  PolicyBucketContent:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref BucketContent
      PolicyDocument:
        Version: 2008-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !Sub ${BucketContent.Arn}/*
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub arn:aws:cloudfront::${AWS::AccountId}:distribution/${Distribution}

  QueueCreateSummary:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 15

  QueueCreateHistory:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 15

  TopicMessageHub:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Protocol: sqs
          Endpoint: !GetAtt QueueCreateSummary.Arn
        - Protocol: sqs
          Endpoint: !GetAtt QueueCreateHistory.Arn

  TopicAsyncInvoke:
    Type: AWS::SNS::Topic

  QueuePolicyCreateSummary:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref QueueCreateSummary
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: sns.amazonaws.com
            Resource:
              - !GetAtt QueueCreateSummary.Arn
              - !GetAtt QueueCreateHistory.Arn
            Action: sqs:SendMessage
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref TopicMessageHub

  FunctionCreateSummary:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: handlers/create_summary.handler
      Policies:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaSQSQueueExecutionRole
        - arn:aws:iam::aws:policy/CloudFrontFullAccess
      Events:
        Sqs:
          Type: SQS
          Properties:
            BatchSize: 1
            Queue: !GetAtt QueueCreateSummary.Arn

  LogGroupCreateSummary:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub ${LambdaLogGroupPrefix}/${FunctionCreateSummary}
      RetentionInDays: 7

  FunctionCreateHistory:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: handlers/create_history.handler
      Policies:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaSQSQueueExecutionRole
        - arn:aws:iam::aws:policy/CloudFrontFullAccess
      Events:
        Sqs:
          Type: SQS
          Properties:
            BatchSize: 1
            Queue: !GetAtt QueueCreateHistory.Arn

  LogGroupCreateHistory:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub ${LambdaLogGroupPrefix}/${FunctionCreateHistory}
      RetentionInDays: 7

  RoleGetRuntimeVersion:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: destination
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: sns:Publish
                Resource: !Ref TopicMessageHub

  StackPython3x8:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: stack_get_version.yml
      Parameters:
        Handler: handlers/get_version/python.handler
        Runtime: python3.8
        RoleArn: !GetAtt RoleGetRuntimeVersion.Arn
        TopicArn: !Ref TopicMessageHub
        TopicArnInvoke: !Ref TopicAsyncInvoke

  StackPython3x9:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: stack_get_version.yml
      Parameters:
        Handler: handlers/get_version/python.handler
        Runtime: python3.9
        RoleArn: !GetAtt RoleGetRuntimeVersion.Arn
        TopicArn: !Ref TopicMessageHub
        TopicArnInvoke: !Ref TopicAsyncInvoke

  StackPython3x10:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: stack_get_version.yml
      Parameters:
        Handler: handlers/get_version/python.handler
        Runtime: python3.10
        RoleArn: !GetAtt RoleGetRuntimeVersion.Arn
        TopicArn: !Ref TopicMessageHub
        TopicArnInvoke: !Ref TopicAsyncInvoke

  StackPython3x11:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: stack_get_version.yml
      Parameters:
        Handler: handlers/get_version/python.handler
        Runtime: python3.11
        RoleArn: !GetAtt RoleGetRuntimeVersion.Arn
        TopicArn: !Ref TopicMessageHub
        TopicArnInvoke: !Ref TopicAsyncInvoke

Outputs:
  DomainNameCloudFront:
    Value: !GetAtt Distribution.DomainName
